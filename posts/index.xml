<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>All Posts - </title>
        <link>https://r-mathieu.github.io/posts/</link>
        <description>All Posts | </description>
        <generator>Hugo -- gohugo.io</generator><managingEditor>mathieu.ro@pm.me (Mathieu)</managingEditor>
            <webMaster>mathieu.ro@pm.me (Mathieu)</webMaster><lastBuildDate>Fri, 04 Oct 2019 00:00:00 &#43;0000</lastBuildDate><atom:link href="https://r-mathieu.github.io/posts/" rel="self" type="application/rss+xml" /><item>
    <title>Professional Project</title>
    <link>https://r-mathieu.github.io/posts/professional-project/</link>
    <pubDate>Fri, 04 Oct 2019 00:00:00 &#43;0000</pubDate>
    <author>Author</author>
    <guid>https://r-mathieu.github.io/posts/professional-project/</guid>
    <description><![CDATA[]]></description>
</item><item>
    <title>About Me</title>
    <link>https://r-mathieu.github.io/about/</link>
    <pubDate>Mon, 01 Jan 0001 00:00:00 &#43;0000</pubDate>
    <author>Author</author>
    <guid>https://r-mathieu.github.io/about/</guid>
    <description><![CDATA[I&rsquo;m a young Junior Gameplay Programmer eager to learn (and to master!) more and more.
I&rsquo;m interested in lots of subjects and mediums such as cinema, music, architecture, video games, photography, car, restoration and so on.
I learned a lot about the making of video games as a gameplay programmer, working with each and every team involved in the development of a AAA game on PC and consoles (PS4 &amp; Xbox One).]]></description>
</item><item>
    <title>Chuck Norris</title>
    <link>https://r-mathieu.github.io/chuck-norris/</link>
    <pubDate>Mon, 01 Jan 0001 00:00:00 &#43;0000</pubDate>
    <author>Author</author>
    <guid>https://r-mathieu.github.io/chuck-norris/</guid>
    <description><![CDATA[https://www.codingame.com/ide/puzzle/chuck-norris
Goal Write a program that takes an incoming message as input and displays as output the message encoded using Chuck Norris’ method.
Rules The input message consists of ASCII characters (7-bit). The encoded output message consists of blocks of 0. A block is separated from another block by a space. Two consecutive blocks are used to produce a series of same value bits (only1 or0 values):
 First block: it is always 0 or 00.]]></description>
</item><item>
    <title>Coding Game</title>
    <link>https://r-mathieu.github.io/coding-game/</link>
    <pubDate>Mon, 01 Jan 0001 00:00:00 &#43;0000</pubDate>
    <author>Author</author>
    <guid>https://r-mathieu.github.io/coding-game/</guid>
    <description><![CDATA[.categories-card{margin: 0 auto;margin-top: 3rem;display: flex;align-items: center;justify-content: space-between;flex-direction: row;flex-wrap: wrap;line-height: 1.6rem;.card-item{font-size: .875rem;text-align: left;width: 45%;display: flex;align-items: flex-start;margin-top: 2rem;min-height: 10rem;padding: 0 2%;position: relative;.card-item-wrapper{width: 100%;overflow: hidden;.card-item-title{font-size: 1.2rem;font-weight: bold;display: inline-block;margin-top: 1rem;margin-bottom: .75rem;}span{float: right;padding-right: 1rem;}}}}.]]></description>
</item><item>
    <title>Defibrillators</title>
    <link>https://r-mathieu.github.io/defibrillators/</link>
    <pubDate>Mon, 01 Jan 0001 00:00:00 &#43;0000</pubDate>
    <author>Author</author>
    <guid>https://r-mathieu.github.io/defibrillators/</guid>
    <description><![CDATA[https://www.codingame.com/ide/puzzle/defibrillators
Goal Based on the data we provide in the tests, write a program that will allow users to find the defibrillator nearest to their location using their mobile phone.
Rules The input data you require for your program is provided in text format. This data is comprised of lines, each of which represents a defibrillator. Each defibrillator is represented by the following fields:
 A number identifying the defibrillator Name Address Contact Phone number Longitude (degrees) Latitude (degrees)  These fields are separated by a semicolon.]]></description>
</item><item>
    <title>Horse Racing Duals</title>
    <link>https://r-mathieu.github.io/horse-racing_duals/</link>
    <pubDate>Mon, 01 Jan 0001 00:00:00 &#43;0000</pubDate>
    <author>Author</author>
    <guid>https://r-mathieu.github.io/horse-racing_duals/</guid>
    <description><![CDATA[https://www.codingame.com/ide/puzzle/horse-racing-duals
Goal Write a program which, using a given number of strengths, identifies the two closest strengths and shows their difference with an integer ( $ \eqslantgtr $ 0).
Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38  #include &lt;iostream&gt;#include &lt;vector&gt;#include &lt;algorithm&gt; using namespace std; int main() { int totalHorses; cin &gt;&gt; totalHorses; cin.]]></description>
</item><item>
    <title>Mars Lander</title>
    <link>https://r-mathieu.github.io/mars-lander-ep2/</link>
    <pubDate>Mon, 01 Jan 0001 00:00:00 &#43;0000</pubDate>
    <author>Author</author>
    <guid>https://r-mathieu.github.io/mars-lander-ep2/</guid>
    <description><![CDATA[https://www.codingame.com/ide/puzzle/mars-lander-episode-2
Goal The goal for your program is to safely land the &ldquo;Mars Lander&rdquo; shuttle, the landing ship which contains the Opportunity rover. Mars Lander is guided by a program, and right now the failure rate for landing on the NASA simulator is unacceptable.
This puzzle is the second level of the &ldquo;Mars Lander&rdquo; trilogy. The controls are the same as the previous level but you must now control the angle in order to succeed.]]></description>
</item><item>
    <title>Mars Lander - Ep.1</title>
    <link>https://r-mathieu.github.io/mars-lander-ep1/</link>
    <pubDate>Mon, 01 Jan 0001 00:00:00 &#43;0000</pubDate>
    <author>Author</author>
    <guid>https://r-mathieu.github.io/mars-lander-ep1/</guid>
    <description><![CDATA[https://www.codingame.com/ide/puzzle/mars-lander-episode-1
Goal The goal for this program is to safely land the &ldquo;Mars Lander&rdquo; shuttle.
Solution The solution can be easily found if you read all the statement and with only this so I&rsquo;ll skip all the informations.
&ldquo;vertical speed must be limited ( ≤ 40m/s in absolute value)&quot;.
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33  #include &lt;iostream&gt; using namespace std; int main() { int totalSurfacePoint; // the number of points used to draw the surface of Mars.]]></description>
</item><item>
    <title>Network Cabling</title>
    <link>https://r-mathieu.github.io/network-cabling/</link>
    <pubDate>Mon, 01 Jan 0001 00:00:00 &#43;0000</pubDate>
    <author>Author</author>
    <guid>https://r-mathieu.github.io/network-cabling/</guid>
    <description><![CDATA[https://www.codingame.com/ide/puzzle/network-cabling
Goal An internet operator plans to connect a business park to the optical fiber network. The area to be covered is large and the operator is asking you to write a program that will calculate the minimum length of optical fiber cable required to connect all buildings.
Rules For the implementation of the works, the operator has technical constraints whereby it is forced to proceed in the following manner: A main cable will cross through the park from the West to the East (from the position x of the most westerly building to the position x of the most easterly building).]]></description>
</item><item>
    <title>Personal Project</title>
    <link>https://r-mathieu.github.io/personal-project/</link>
    <pubDate>Mon, 01 Jan 0001 00:00:00 &#43;0000</pubDate>
    <author>Author</author>
    <guid>https://r-mathieu.github.io/personal-project/</guid>
    <description><![CDATA[.categories-card{margin: 0 auto;margin-top: 3rem;display: flex;align-items: center;justify-content: space-between;flex-direction: row;flex-wrap: wrap;line-height: 1.6rem;.card-item{font-size: .875rem;text-align: left;width: 45%;display: flex;align-items: flex-start;margin-top: 2rem;min-height: 10rem;padding: 0 2%;position: relative;.card-item-wrapper{width: 100%;overflow: hidden;.card-item-title{font-size: 1.2rem;font-weight: bold;display: inline-block;margin-top: 1rem;margin-bottom: .75rem;}span{float: right;padding-right: 1rem;}}}}.]]></description>
</item></channel>
</rss>
